{
    "collab_server" : "",
    "contents" : "#' Fit the Nelson-Siegel-Svensson model adjusting for Credit ratings\n#\n#\n#' @param data data file with at least columns named Yield and Maturity\n#' @param loglambda1start starting value for log(lambda1) in Nelson-Siegel-Svensson model\n#' @param loglambda2start starting value for log(lambda2) in Nelson-Siegel-Svensson model\n#' @param epsilon a small value to prevent -Inf when taking log of zero\n#' @return A NelsonSiegelSvenssonAdjust object\n#' @export\n\n\nfitnelsonsiegelsvenssonadjust <- function(data, lambda1start=1/lambdastart(2.5),\n                                    lambda2start=1/lambdastart(5), epsilon=1E-14,fixed=F){\n  lambda1 <- lambda1start\n  lambda2 <- lambda2start\n  gamma1 <- log(lambda1start)\n  gamma2 <- log(lambda2start-lambda1start)\n  DF <- data\n  y <- DF$Yield\n  Z1 <- DF$Maturity/lambda1\n  Z2 <- DF$Maturity/lambda2\n  F0 <- 1-(1-exp(-Z1))/Z1\n  F1 <- (1-exp(-Z1))/Z1\n  F2 <- ((1-exp(-Z1))/Z1-exp(-Z1))\n  F3 <-  ((1-exp(-Z2))/Z2-exp(-Z2))\n  BBB <- as.numeric(as.character(DF$Credit.rating)==\"BBB\")\n  BBBm <- as.numeric(as.character(DF$Credit.rating)==\"BBB-\")\n\n\n  xx1 <- nnnpls(cbind(F0,F1,F2,F3,BBB+BBBm,BBBm),DF$Yield,c(1,1,-1,-1,1,1))\n  xx2 <- nnnpls(cbind(F0,F1,F2,F3,BBB+BBBm,BBBm),DF$Yield,c(1,1,1,-1,1,1))\n  xx3 <- nnnpls(cbind(F0,F1,F2,F3,BBB+BBBm,BBBm),DF$Yield,c(1,1,-1,1,1,1))\n  xx4 <- nnnpls(cbind(F0,F1,F2,F3,BBB+BBBm,BBBm),DF$Yield,c(1,1,1,1,1,1))\n  mindeviance=c(deviance(xx1),deviance(xx2),deviance(xx3),deviance(xx4))\n  eval(parse(text=paste0(\"svA <- coef(xx\",which.min(mindeviance),\")\")))\n  if(fixed){\n    fitorig1 <- nlsLM(Yield~ exp(delta1) + (exp(delta2)-exp(delta1)) * (1-exp(-Maturity/(exp(gamma1)))) /\n                        (Maturity/(exp(gamma1))) +\n                        delta3 * ((1-exp(-Maturity/(exp(gamma1)))) /\n                                    (Maturity/(exp(gamma1)))-\n                                    exp(-Maturity/(exp(gamma1))))+\n                        delta4 * ((1-exp(-Maturity/(exp(gamma2)+exp(gamma1)))) /\n                                    (Maturity/(exp(gamma2)+exp(gamma1)))-\n                                    exp(-Maturity/(exp(gamma2)+exp(gamma1))))+\n                        exp(theta1)*(BBB+BBBm)+exp(theta2)*BBBm,\n                      data=DF,\n                      start=list(delta1=log(svA[1]+epsilon),\n                                 delta2=log(svA[2]+epsilon),\n                                 delta3=svA[3],delta4=svA[4],\n                                 theta1=log(svA[5]+epsilon),\n                                 theta2=log(svA[6]+epsilon)),\n                      control=nls.lm.control(maxiter=1024,maxfev=10000), trace=F,model=T)\n  } else {\n    fitorig1 <- nlsLM(Yield~ exp(delta1) + (exp(delta2)-exp(delta1)) * (1-exp(-Maturity/(exp(gamma1)))) /\n                        (Maturity/(exp(gamma1))) +\n                        delta3 * ((1-exp(-Maturity/(exp(gamma1)))) /\n                                    (Maturity/(exp(gamma1)))-\n                                    exp(-Maturity/(exp(gamma1))))+\n                        delta4 * ((1-exp(-Maturity/(exp(gamma2)+exp(gamma1)))) /\n                                    (Maturity/(exp(gamma2)+exp(gamma1)))-\n                                    exp(-Maturity/(exp(gamma2)+exp(gamma1))))+\n                        exp(theta1)*(BBB+BBBm)+exp(theta2)*BBBm,\n                      data=DF,\n                      start=list(delta1=log(svA[1]+epsilon),\n                                 delta2=log(svA[2]+epsilon),\n                                 delta3=svA[3],delta4=svA[4],\n                                 gamma1=log(lambda1start),\n                                 gamma2=log(lambda2start-lambda1start),\n                                 theta1=log(svA[5]+epsilon),\n                                 theta2=log(svA[6]+epsilon)),\n                      control=nls.lm.control(maxiter=1024,maxfev=10000), trace=F,model=T)\n  }\n\n  class(fitorig1) <- c(\"NelsonSiegelSvenssonAdjust\",\"nls\")\n  return(fitorig1)\n}\n\n\n\n\n\n\n",
    "created" : 1450300095846.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2448651148",
    "id" : "E3CE2438",
    "lastKnownWriteTime" : 1479163848,
    "last_content_update" : 1479163848355,
    "path" : "~/Documents/DRP/drpr/R/fitnelsonsiegelsvenssonadjust.R",
    "project_path" : "R/fitnelsonsiegelsvenssonadjust.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}