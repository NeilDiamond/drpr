{
    "collab_server" : "",
    "contents" : "gswt1 <-\n  function (tt = 10, data=Jan15, sigma = 1.5, ...){\n    maturity <- data$Maturity\n    issue <- data$Amount.issued\n    yield <- data$Yield\n    w <- issue * dnorm(maturity, tt, sigma)\n    w <- w/sum(w)\n    reg1 <- lm(maturity ~ 1, weights = w, model=T)\n    reg2 <- lm(yield ~ 1, weights = w, model=T)\n    result <- list(reg1, reg2, tt, sigma, data)\n    class(result) <- \"GaussianSmooth\"\n    return(result)\n}\n\ngkest1 <- function(sigma=1.5, data=Jan15){\n  gswt0 <-\n    function (tt = 10, data=data, sigma = sigma, ...){\n      maturity <- data$Maturity\n      issue <- data$Amount.issued\n      yield <- data$Yield\n      w <- issue * dnorm(maturity, tt, sigma)\n      w <- w/sum(w)\n      reg1 <- lm(maturity ~ 1, weights = w, model=T)\n      reg2 <- lm(yield ~ 1, weights = w, model=T)\n      result <- c(tt,sigma, coef(reg2), coef(reg1))\n      names(result) <- c(\"Target Tenor\",\"Sigma\",\"Target Tenor Yield\",\"Effective Term to Maturity\")\n      return(result)\n   }\n  interpmat <- t(sapply(c(3,5,7,10), gswt0,\n                        sigma=sigma, data=data))\n  interpmat <- as.data.frame(interpmat)\n  colnames(interpmat) <- c(\"Tenor\",\"Sigma\",\"SemiAnnYield\",\"EffectiveTenor\")\n  AnnYield <- ((1+interpmat[,3]/200)^2-1)*100\n  Interp7yrYield <- interpmat[3,3]+\n    (interpmat[4,3]-interpmat[3,3])/(interpmat[4,4]-interpmat[3,4])*(7-interpmat[3,4])\n  Extrap10yrYield <- interpmat[3,3]+\n    (interpmat[4,3]-interpmat[3,3])/(interpmat[4,4]-interpmat[3,4])*(10-interpmat[3,4])\n  Interp7yrYield_ann <- ((1+Interp7yrYield/200)^2-1)*100\n  Extrap10yrYield_ann <- ((1+Extrap10yrYield/200)^2-1)*100\n  AnnYieldMat <- cbind(interpmat, AnnYield)\n  results <- list(round(AnnYieldMat,4), round(Interp7yrYield,4), round(Extrap10yrYield,4),\n                  round(Interp7yrYield_ann,4), round(Extrap10yrYield_ann, 4))\n  names(results) <- c(\"Annualized Yields\", \"Interpolated 7 year Yield (Semi-annual basis)\",\n                      \"Extrapolated 10 year Yield (Semi-annual basis)\",\n                      \"Interpolated 7 year Yield (Annualized Basis)\",\n                      \"Extrapolated 10 year Yield (Annualized Basis)\")\n  return(results)\n}\n\nprint.GaussianSmooth <- function(obj, ...){\n  result <- c(obj[[3]], obj[[4]], coef(obj[[2]]), coef(obj[[1]]))\n  names(result) <- c(\"Target Tenor\", \"Sigma\", \"Target Tenor Yield\",\n                     \"Effective Term to Maturity\")\n  return(result)\n}\n\n\nsummary.GaussianSmooth <- function(obj, ...){\n  gett.GS <- function(obj){\n    c(obj[[3]],obj[[4]],coef(obj[[2]]),coef(obj[[1]]))\n  }\n  interpmat <- matrix(NA, 4, 4)\n  interpmat[1,] <- gett.GS(gswt1(3,\n                                 data=obj[[5]]))\n  interpmat[2,] <- gett.GS(gswt1(5,\n                                 data=obj[[5]]))\n  interpmat[3,] <- gett.GS(gswt1(7,\n                                 data=obj[[5]]))\n  interpmat[4,] <- gett.GS(gswt1(10,\n                                 data=obj[[5]]))\n  interpmat <- as.data.frame(interpmat)\n  colnames(interpmat) <- c(\"Tenor\",\"Sigma\",\"SemiAnnYield\",\"EffectiveTenor\")\n  AnnYield <- ((1+interpmat[,3]/200)^2-1)*100\n  Interp7yrYield <- interpmat[3,3]+\n    (interpmat[4,3]-interpmat[3,3])/(interpmat[4,4]-interpmat[3,4])*(7-interpmat[3,4])\n  Extrap10yrYield <- interpmat[3,3]+\n    (interpmat[4,3]-interpmat[3,3])/(interpmat[4,4]-interpmat[3,4])*(10-interpmat[3,4])\n  Interp7yrYield_ann <- ((1+Interp7yrYield/200)^2-1)*100\n  Extrap10yrYield_ann <- ((1+Extrap10yrYield/200)^2-1)*100\n  AnnYieldMat <- cbind(interpmat, AnnYield)\n  results <- list(round(AnnYieldMat,4), round(Interp7yrYield,4), round(Extrap10yrYield,4),\n                  round(Interp7yrYield_ann,4), round(Extrap10yrYield_ann, 4))\n  names(results) <- c(\"Annualized Yields\", \"Interpolated 7 year Yield (Semi-annual basis)\",\n                      \"Extrapolated 10 year Yield (Semi-annual basis)\",\n                      \"Interpolated 7 year Yield (Annualized Basis)\",\n                      \"Extrapolated 10 year Yield (Annualized Basis)\")\n  results\n}\n\n\n\nplot.GaussianSmooth <- function(obj, ...){\n  plot(obj[[1]]$model$maturity,obj[[2]]$model$yield, xlab=\"Maturity\", ylab=\"Yield\",\n       main=\"Gaussian Smoother\")\n  xx <- seq(0.1,max(obj[[1]]$model$maturity),0.1)\n  yy <- unlist(sapply(sapply(lapply(xx,gswt1,data=obj[[5]]),\"[\",2),\"[\",1))\n  invisible(lines(xx,yy))\n  abline(v=10,lty=2)\n}\n\n\n\ngswt1adjust <- function(tt = 10, data=Jan15, sigma = 1.5){\n  gswt0 <-\n    function  (...){\n      maturity <- data$Maturity\n      issue <- data$Amount.issued\n      yield <- data$Yield\n      w <- issue * dnorm(maturity, tt, sigma)\n      w <- w/sum(w)\n      reg1 <- lm(maturity ~ 1, weights = w, model=T)\n      reg2 <- lm(yield ~ 1, weights = w, model=T)\n      result <- c(tt,sigma, coef(reg2), coef(reg1))\n      names(result) <- c(\"Target Tenor\",\"Sigma\",\"Target Tenor Yield\",\"Effective Term to Maturity\")\n      return(result)\n    }\n  maturity <- data$Maturity\n  issue <- data$Amount.issued\n  yield <- data$Yield\n  w <- issue * dnorm(maturity, tt, sigma)\n  w <- w/sum(w)\n  adjust1 <- rep(0, nrow(data))\n  newdata <- data.frame(Maturity=data$Maturity, Amount.issued=data$Amount.issued,\n                        Yield=data$Yield)\n\n  resids1 <- data$Yield - t(sapply(data$Maturity, gswt0, data=newdata))[,3]\n  adjust <- with(data, model.matrix(~Credit.rating))[,-1]%*%\n    coef(lm(resids1~Credit.rating, data=data))[-1]\n  i <- 0\n  while(sum(adjust^2)>10^(-8)){\n    i <- i+1\n    #cat(i, sum(adjust^2),\"\\n\")\n    adjust1 <- adjust+adjust1\n    newdata <- data.frame(Maturity=data$Maturity, Amount.issued=data$Amount.issued,\n                          Yield=data$Yield-adjust1)\n    resids1 <- data$Yield - adjust1 - t(sapply(data$Maturity, gswt0, data=newdata))[,3]\n    adjust <- with(data, model.matrix(~Credit.rating))[,-1]%*%\n      coef(lm(resids1~Credit.rating, data=data))[-1]\n  }\n\n  reg1 <- lm(maturity ~ 1, weights = w, model=T)\n  reg2 <- lm(yield -adjust1 ~ 1, weights = w, model=T)\n  result <- list(reg1, reg2, tt, sigma, data, adjust1, with(data, model.matrix(~Credit.rating)))\n  class(result) <- \"GaussianSmoothAdjust\"\n  return(result)\n}\n\n\ngkest1adjust <- function(sigma=1.5, data){\n  gswt0adjust <- function(tt = 10, data=data, sigma = sigma){\n    maturity <- data$Maturity\n    issue <- data$Amount.issued\n    yield <- data$Yield\n    w <- issue * dnorm(maturity, tt, sigma)\n    w <- w/sum(w)\n    adjust1 <- rep(0, nrow(data))\n    newdata <- data.frame(Maturity=data$Maturity, Amount.issued=data$Amount.issued,\n                          Yield=data$Yield)\n    resids1 <- data$Yield - t(sapply(data$Maturity, gswt0, data=newdata))[,3]\n    adjust <- with(data, model.matrix(~Credit.rating))[,-1]%*%\n      coef(lm(resids1~Credit.rating, data=data))[-1]\n    i <- 0\n    while(sum(adjust^2)>10^(-8)){\n      i <- i+1\n      #cat(i, sum(adjust^2),\"\\n\")\n      adjust1 <- adjust+adjust1\n      newdata <- data.frame(Maturity=data$Maturity, Amount.issued=data$Amount.issued,\n                            Yield=data$Yield-adjust1)\n      resids1 <- data$Yield - adjust1 - t(sapply(data$Maturity, gswt0, data=newdata))[,3]\n      adjust <- with(data, model.matrix(~Credit.rating))[,-1]%*%\n        coef(lm(resids1~Credit.rating, data=data))[-1]\n    }\n\n    reg1 <- lm(maturity ~ 1, weights = w, model=T)\n    reg2 <- lm(yield -adjust1 ~ 1, weights = w, model=T)\n    result <- c(tt,sigma, coef(reg2), coef(reg1))\n    names(result) <- c(\"Target Tenor\",\"Sigma\",\"Target Tenor Yield\",\"Effective Term to Maturity\")\n    return(result)\n  }\n\n  interpmat <- t(sapply(c(3,5,7,10), gswt0adjust,\n                        sigma=sigma, data=data))\n  interpmat <- as.data.frame(interpmat)\n  colnames(interpmat) <- c(\"Tenor\",\"Sigma\",\"SemiAnnYield\",\"EffectiveTenor\")\n  AnnYield <- ((1+interpmat[,3]/200)^2-1)*100\n  Interp7yrYield <- interpmat[3,3]+\n    (interpmat[4,3]-interpmat[3,3])/(interpmat[4,4]-interpmat[3,4])*(7-interpmat[3,4])\n  Extrap10yrYield <- interpmat[3,3]+\n    (interpmat[4,3]-interpmat[3,3])/(interpmat[4,4]-interpmat[3,4])*(10-interpmat[3,4])\n  Interp7yrYield_ann <- ((1+Interp7yrYield/200)^2-1)*100\n  Extrap10yrYield_ann <- ((1+Extrap10yrYield/200)^2-1)*100\n  AnnYieldMat <- cbind(interpmat, AnnYield)\n  results <- list(round(AnnYieldMat,4), round(Interp7yrYield,4), round(Extrap10yrYield,4),\n                  round(Interp7yrYield_ann,4), round(Extrap10yrYield_ann, 4))\n  names(results) <- c(\"Annualized Yields\", \"Interpolated 7 year Yield (Semi-annual basis)\",\n                      \"Extrapolated 10 year Yield (Semi-annual basis)\",\n                      \"Interpolated 7 year Yield (Annualized Basis)\",\n                      \"Extrapolated 10 year Yield (Annualized Basis)\")\n  results\n}\n\n\nprint.GaussianSmoothAdjust <- function(obj){\n  adj <- sum(as.numeric(names(table(obj[[6]])))*table(obj[[6]]))/sum(as.numeric(table(obj[[6]])))\n  result <- c(obj[[3]], obj[[4]], coef(obj[[2]])+adj, coef(obj[[1]]))\n  names(result) <- c(\"Target Tenor\", \"Sigma\", \"Target Tenor Yield\",\n                     \"Effective Term to Maturity\")\n  return(result)\n}\n\n\nsummary.GaussianSmoothAdjust <- function(obj){\n  adj <- sum(as.numeric(names(table(obj[[6]])))*table(obj[[6]]))/sum(as.numeric(table(obj[[6]])))\n  gett.GS <- function(obj){\n    c(obj[[3]],obj[[4]],coef(obj[[2]])+adj,coef(obj[[1]]))\n  }\n  interpmat <- matrix(NA, 4, 4)\n  interpmat[1,] <- gett.GS(gswt1(3,\n                                 data=obj[[5]]))\n  interpmat[2,] <- gett.GS(gswt1(5,\n                                 data=obj[[5]]))\n  interpmat[3,] <- gett.GS(gswt1(7,\n                                 data=obj[[5]]))\n  interpmat[4,] <- gett.GS(gswt1(10,\n                                 data=obj[[5]]))\n  interpmat <- as.data.frame(interpmat)\n  colnames(interpmat) <- c(\"Tenor\",\"Sigma\",\"SemiAnnYield\",\"EffectiveTenor\")\n  AnnYield <- ((1+interpmat[,3]/200)^2-1)*100\n  Interp7yrYield <- interpmat[3,3]+\n    (interpmat[4,3]-interpmat[3,3])/(interpmat[4,4]-interpmat[3,4])*(7-interpmat[3,4])\n  Extrap10yrYield <- interpmat[3,3]+\n    (interpmat[4,3]-interpmat[3,3])/(interpmat[4,4]-interpmat[3,4])*(10-interpmat[3,4])\n  Interp7yrYield_ann <- ((1+Interp7yrYield/200)^2-1)*100\n  Extrap10yrYield_ann <- ((1+Extrap10yrYield/200)^2-1)*100\n  AnnYieldMat <- cbind(interpmat, AnnYield)\n  results <- list(round(AnnYieldMat,4), round(Interp7yrYield,4), round(Extrap10yrYield,4),\n                  round(Interp7yrYield_ann,4), round(Extrap10yrYield_ann, 4))\n  names(results) <- c(\"Annualized Yields\", \"Interpolated 7 year Yield (Semi-annual basis)\",\n                      \"Extrapolated 10 year Yield (Semi-annual basis)\",\n                      \"Interpolated 7 year Yield (Annualized Basis)\",\n                      \"Extrapolated 10 year Yield (Annualized Basis)\")\n  results\n}\n\nplot.GaussianSmoothAdjust <- function(obj){\n  plot(obj[[1]]$model$maturity,obj[[2]]$model$yield+obj[[6]],\n       xlab=\"Maturity\", ylab=\"Yield\",\n       main=\"Gaussian Smoother\\nAdjusted for Credit Ratings\",\n       pch=as.numeric(obj[[5]]$Credit.rating))\n  xx <- seq(0.1,max(obj[[1]]$model$maturity),0.1)\n  yy <- unlist(sapply(sapply(lapply(xx,gswt1,data=obj[[5]]),\"[\",2),\"[\",1))\n  tt1 <- table(obj[6])\n  nn1 <- as.numeric(names(tt1))\n  invisible(lines(xx,yy))\n  invisible(lines(xx,yy+nn1[1]))\n  invisible(lines(xx,yy+nn1[3]))\n  n2 <- tt1[2]\n  n3 <- tt1[3]\n  n1 <- tt1[1]\n  w1 <- n1/(n1+n2+n3)\n  w2 <- n2/(n1+n2+n3)\n  w3 <- n3/(n1+n2+n3)\n  x <- w1*(yy+nn1[1])+w2*yy+w3*(yy+nn1[3])\n  invisible(lines(xx,x, lty=2))\n  abline(v=10,lty=2)\n}\n\nlambdastart <- function(maturity=2.5){\n  beta2 <- function(lam){\n    ((1-exp(-maturity*lam))/(maturity*lam)-exp(-maturity*lam))\n  }\n  optimize(f=beta2, interval=c(10^(-6),10^(6),1000), maximum=T)$maximum\n}\n\nnelsonsiegelorig <- function(maturity, lambda, beta1, beta2, beta3){\n  return(beta1 + beta2 * (1-exp(-lambda*maturity)) / (lambda*maturity)+\n           beta3 * ((1-exp(-lambda*maturity)) / (lambda*maturity)-exp(-lambda*maturity)))\n}\n\nfitnelsonsiegel <- function(data, lambdastartval=lambdastart(2.5),\n                            epsilon=1E-14){\n  lambda <- lambdastartval\n  DF <- data\n  y <- DF$Yield\n  Z <- DF$Maturity*lambda\n  F0 <- 1-(1-exp(-Z))/Z\n  F1 <- (1-exp(-Z))/Z\n  F2 <- ((1-exp(-Z))/Z-exp(-Z))\n  xx1 <- nnnpls(cbind(F0,F1,F2),DF$Yield,c(1,1,-1))\n  xx2 <- nnnpls(cbind(F0,F1,F2),DF$Yield,c(1,1,1))\n  mindeviance=c(deviance(xx1),deviance(xx2))\n  eval(parse(text=paste0(\"svA <- coef(xx\",which.min(mindeviance),\")\")))\n  fitorig1 <- nlsLM(Yield~ exp(delta1) + (exp(delta2)-exp(delta1)) * (1-exp(-Maturity*(exp(gamma)))) /\n                      (Maturity*(exp(gamma))) +\n                      delta3 * ((1-exp(-Maturity*(exp(gamma)))) /\n                                  (Maturity*(exp(gamma)))-\n                                  exp(-Maturity*(exp(gamma)))),\n                    data=DF,\n                    start=list(delta1=log(svA[1]+epsilon),\n                               delta2=log(svA[2]+epsilon),\n                               delta3=svA[3],\n                               gamma=log(lambdastartval)),\n                    control=nls.lm.control(maxiter=1000,maxfev=2000), trace=F,model=T)\n  class(fitorig1) <- c(\"NelsonSiegel\",\"nls\")\n  return(fitorig1)\n}\n\nprint.NelsonSiegel <- function(obj){\n  transformns <- function(obj){\n    cc <- coef(obj)\n    tt <- cc\n    tt[1] <- exp(cc[1]); tt[2] <- exp(cc[2])-exp(cc[1])\n    tt[4] <- exp(cc[4]);\n    names(tt) <- c(\"beta1\",\"beta2\",\"beta3\",\"lambda\")\n    return(tt)\n  }\n\n  x <- predict(obj, newdata=data.frame(Maturity=10))[1]\n  p <- getFromNamespace(\"print.nls\",\"stats\")(obj)\n  r <- list(transformns(obj),x,((1+x/200)^2-1)*100)\n  attributes(r) <- NULL\n\n  names(r) <- c(\"Original Parameters\",\"Ten Year Yield (Semi-Annual Basis)\",\n                \"Ten Year Yield (Annual Basis)\")\n  return(r)\n}\n\n\n\n\n\n\n\nsummary.NelsonSiegel <- function(obj){\n  transformns <- function(obj){\n    cc <- coef(obj)\n    tt <- cc\n    tt[1] <- exp(cc[1]); tt[2] <- exp(cc[2])-exp(cc[1])\n    tt[4] <- exp(cc[4]);\n    names(tt) <- c(\"beta1\",\"beta2\",\"beta3\",\"lambda\")\n    return(tt)\n  }\n  x <- predict(obj, newdata=data.frame(Maturity=10))[1]\n  r <- list(getFromNamespace(\"summary.nls\",\"stats\")(obj),transformns(obj),x,((1+x/200)^2-1)*100)\n  attributes(r) <- NULL\n  names(r) <- c(\"Fitted Nelson-Siegel Model\",\"Original Parameters\",\"Ten Year Yield (Semi-Annual Basis)\",\n                \"Ten Year Yield (Annual Basis)\")\n  return(r)\n}\n\n\nplot.NelsonSiegel <- function(obj){\n  plot(obj$model$Maturity, obj$model$Yield, xlab=\"Maturity\", ylab=\"Yield\",\n       main=\"Nelson-Siegel Model\",las=1)\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        predict(obj, newdata=data.frame(Maturity=seq(0.1,max(obj$model$Maturity),0.1))))\n  abline(v=10,lty=2)\n}\n\n\nfitnelsonsiegelsvensson <- function(data, lambda1start=1/lambdastart(2.5),\n                                    lambda2start=1/lambdastart(5), epsilon=1E-14){\n  lambda1 <- lambda1start\n  lambda2 <- lambda2start\n  DF <- data\n  y <- DF$Yield\n  Z1 <- DF$Maturity/lambda1\n  Z2 <- DF$Maturity/lambda2\n  F0 <- 1-(1-exp(-Z1))/Z1\n  F1 <- (1-exp(-Z1))/Z1\n  F2 <- ((1-exp(-Z1))/Z1-exp(-Z1))\n  F3 <-  ((1-exp(-Z2))/Z2-exp(-Z2))\n  xx1 <- nnnpls(cbind(F0,F1,F2,F3),DF$Yield,c(1,1,-1,-1))\n  xx2 <- nnnpls(cbind(F0,F1,F2,F3),DF$Yield,c(1,1,1,-1))\n  xx3 <- nnnpls(cbind(F0,F1,F2,F3),DF$Yield,c(1,1,-1,1))\n  xx4 <- nnnpls(cbind(F0,F1,F2,F3),DF$Yield,c(1,1,1,1))\n  mindeviance=c(deviance(xx1),deviance(xx2),deviance(xx3),deviance(xx4))\n  eval(parse(text=paste0(\"svA <- coef(xx\",which.min(mindeviance),\")\")))\n  fitorig1 <- nlsLM(Yield~ exp(delta1) + (exp(delta2)-exp(delta1)) * (1-exp(-Maturity/(exp(gamma1)))) /\n                      (Maturity/(exp(gamma1))) +\n                      delta3 * ((1-exp(-Maturity/(exp(gamma1)))) /\n                                  (Maturity/(exp(gamma1)))-\n                                  exp(-Maturity/(exp(gamma1))))+\n                      delta4 * ((1-exp(-Maturity/(exp(gamma2)+exp(gamma1)))) /\n                                  (Maturity/(exp(gamma2)+exp(gamma1)))-\n                                  exp(-Maturity/(exp(gamma2)+exp(gamma1)))),\n                    data=data,\n                    start=list(delta1=log(svA[1]+epsilon),\n                               delta2=log(svA[2]+epsilon),\n                               delta3=svA[3],delta4=svA[4],\n                               gamma1=log(lambda1start),\n                               gamma2=log(lambda2start-lambda1start)),\n                    control=nls.lm.control(maxiter=1000,maxfev=2000), trace=F,model=T)\n  class(fitorig1) <- c(\"NelsonSiegelSvensson\",\"nls\")\n  return(fitorig1)\n}\n\nprint.NelsonSiegelSvensson <- function(obj){\n  transformnss <- function(obj){\n    cc <- coef(obj)\n    tt <- cc\n    tt[1] <- exp(cc[1]); tt[2] <- exp(cc[2])-exp(cc[1])\n    tt[5] <- exp(cc[5]); tt[6] <- exp(cc[5])+exp(cc[6])\n    names(tt) <- c(\"beta1\",\"beta2\",\"beta3\",\"beta4\",\"lambda1\",\"lambda2\")\n    return(tt)\n  }\n  x <- predict(obj, newdata=data.frame(Maturity=10))[1]\n  p <- getFromNamespace(\"print.nls\",\"stats\")(obj)\n  r <- list(transformnss(obj),x,((1+x/200)^2-1)*100)\n  attributes(r) <- NULL\n\n  names(r) <- c(\"Original Parameters\",\"Ten Year Yield (Semi-Annual Basis)\",\n                \"Ten Year Yield (Annual Basis)\")\n  return(r)\n}\n\nsummary.NelsonSiegelSvensson <- function(obj){\n  transformnss <- function(obj){\n    cc <- coef(obj)\n    tt <- cc\n    tt[1] <- exp(cc[1]); tt[2] <- exp(cc[2])-exp(cc[1])\n    tt[5] <- exp(cc[5]); tt[6] <- exp(cc[5])+exp(cc[6])\n    names(tt) <- c(\"beta1\",\"beta2\",\"beta3\",\"beta4\",\"lambda1\",\"lambda2\")\n    return(tt)\n  }\n  Z10 <- 10/(obj$model$lambda1)\n  Z20 <- 10/(obj$model$lambda2)\n  F10 <- (1-exp(-Z10))/Z10\n  F20 <- ((1-exp(-Z10))/Z10-exp(-Z10))\n  F30 <-  ((1-exp(-Z20))/Z20-exp(-Z20))\n  x <- predict(obj, newdata=data.frame(Maturity=10))[1]\n  r <- list(\n    getFromNamespace(\"summary.nls\",\"stats\")(obj),transformnss(obj),x,((1+x/200)^2-1)*100)\n  attributes(r) <- NULL\n  names(r) <- c(\"Fitted Nelson-Siegel-Svensson Model\",\n                \"Original Parameters\",\"Ten Year Yield (Semi-Annual Basis)\",\n                \"Ten Year Yield (Annual Basis)\")\n  return(r)\n}\n\n\nplot.NelsonSiegelSvensson <- function(obj){\n  plot(obj$model$Maturity, obj$model$Yield, xlab=\"Maturity\", ylab=\"Yield\",\n       main=\"Nelson-Siegel-Svennson Model\",las=1)\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        predict(obj, newdata=data.frame(Maturity=seq(0.1,max(obj$model$Maturity),0.1))))\n  abline(v=10,lty=2)\n}\n\n\n\n\nfitnelsonsiegeladjust <- function(data, lambdastartval=lambdastart(2.5),\n                                  epsilon=1E-14){\n  lambda <- lambdastartval\n  DF <- data\n  dummyvars <- model.matrix(~DF$Credit.rating)[,2:3]\n  y <- DF$Yield\n  Z <- DF$Maturity*lambda\n  F0 <- 1-(1-exp(-Z))/Z\n  F1 <- (1-exp(-Z))/Z\n  F2 <- ((1-exp(-Z))/Z-exp(-Z))\n  BBB <- as.numeric(as.character(DF$Credit.rating)==\"BBB\")\n  BBBm <- as.numeric(as.character(DF$Credit.rating)==\"BBB-\")\n\n  xx1 <- nnnpls(cbind(F0,F1,F2,BBB+BBBm,BBBm),DF$Yield,c(1,1,-1,1,1))\n  xx2 <- nnnpls(cbind(F0,F1,F2,BBB+BBBm,BBBm),DF$Yield,c(1,1,1,1,1))\n\n\n  mindeviance=c(deviance(xx1),deviance(xx2))\n  eval(parse(text=paste0(\"svA <- coef(xx\",which.min(mindeviance),\")\")))\n\n  fitorig1 <- nlsLM(Yield~ exp(delta1) + (exp(delta2)-exp(delta1)) * (1-exp(-Maturity*(exp(gamma)))) /\n                      (Maturity*(exp(gamma))) +\n                      delta3 * ((1-exp(-Maturity*(exp(gamma)))) /\n                                  (Maturity*(exp(gamma)))-\n                                  exp(-Maturity*(exp(gamma))))+\n                      exp(theta1)*(BBB+BBBm)+exp(theta2)*BBBm,\n                    data=DF,\n                    start=list(delta1=log(svA[1]+epsilon),\n                               delta2=log(svA[2]+epsilon),\n                               delta3=svA[3],\n                               gamma=log(lambdastartval),\n                               theta1=log(svA[4]+epsilon),\n                               theta2=log(svA[5]+epsilon)),\n                    control=nls.lm.control(maxiter=1000,maxfev=2000), trace=F,model=T)\n\n  class(fitorig1) <- c(\"NelsonSiegelAdjust\",\"nls\")\n  return(fitorig1)\n}\n\nprint.NelsonSiegelAdjust <- function(obj){\n  transformnsa <- function(obj){\n    cc <- coef(obj)\n    tt <- cc\n    tt[1] <- exp(cc[1]); tt[2] <- exp(cc[2])-exp(cc[1])\n    tt[4] <- exp(cc[4]); tt[5] <- exp(cc[6]); tt[6] <- -exp(cc[5])\n    names(tt) <- c(\"beta1\",\"beta2\",\"beta3\",\"lambda\", \"beta5\", \"beta6\")\n    return(tt)\n  }\n  x1 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=0, BBB=0))[1]\n  x2 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=0, BBB=1))[1]\n  x3 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=1, BBB=0))[1]\n  n2 <- sum(obj$model$BBB, na.rm=T)\n  n3 <- sum(obj$model$BBBm, na.rm=T)\n  n1 <- length(obj$model$BBB[!is.na(obj$model$BBB)])-n2-n3\n  w1 <- n1/(n1+n2+n3)\n  w2 <- n2/(n1+n2+n3)\n  w3 <- n3/(n1+n2+n3)\n  x <- w1*x1+w2*x2+w3*x3\n  p <- getFromNamespace(\"print.nls\",\"stats\")(obj)\n  r <- list(transformnsa(obj),x,((1+x/200)^2-1)*100)\n  attributes(r) <- NULL\n\n  names(r) <- c(\"Original Parameters\",\"Ten Year Yield (Semi-Annual Basis)\",\n                \"Ten Year Yield (Annual Basis)\")\n  return(r)\n}\n\nsummary.NelsonSiegelAdjust <- function(obj){\n  transformnsa <- function(obj){\n    cc <- coef(obj)\n    tt <- cc\n    tt[1] <- exp(cc[1]); tt[2] <- exp(cc[2])-exp(cc[1])\n    tt[4] <- exp(cc[4]); tt[5] <- exp(cc[6]); tt[6] <- -exp(cc[5])\n    names(tt) <- c(\"beta1\",\"beta2\",\"beta3\",\"lambda\", \"beta5\", \"beta6\")\n    return(tt)\n  }\n  x1 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=0, BBB=0))[1]\n  x2 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=0, BBB=1))[1]\n  x3 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=1, BBB=0))[1]\n  n2 <- sum(obj$model$BBB, na.rm=T)\n  n3 <- sum(obj$model$BBBm, na.rm=T)\n  n1 <- length(obj$model$BBB[!is.na(obj$model$BBB)])-n2-n3\n  w1 <- n1/(n1+n2+n3)\n  w2 <- n2/(n1+n2+n3)\n  w3 <- n3/(n1+n2+n3)\n  x <- w1*x1+w2*x2+w3*x3\n  r <- list(getFromNamespace(\"summary.nls\",\"stats\")(obj),transformnsa(obj),x,((1+x/200)^2-1)*100)\n  attributes(r) <- NULL\n  names(r) <- c(\"Fitted Nelson-Siegel Model\",\"Original Parameters\",\"Ten Year Yield (Semi-Annual Basis)\",\n                \"Ten Year Yield (Annual Basis)\")\n  return(r)\n}\n\n\n\nplot.NelsonSiegelAdjust <- function(obj){\n  plot(obj$model$Maturity, obj$model$Yield, xlab=\"Maturity\", ylab=\"Yield\",\n       main=\"Nelson-Siegel Model\\nAdjusted for Credit Ratings\",las=1,\n       pch=1+obj$model$BBB+2*obj$model$BBBm)\n  p1 <- predict(obj, newdata=data.frame(Maturity=seq(0.1,max(obj$model$Maturity),0.1),\n                                        BBB=rep(0,length(seq(0.1,max(obj$model$Maturity),0.1))),\n                                        BBBm=rep(0,length(seq(0.1,max(obj$model$Maturity),0.1)))))\n  p2 <- predict(obj, newdata=data.frame(Maturity=seq(0.1,max(obj$model$Maturity),0.1),\n                                        BBB=rep(1,length(seq(0.1,max(obj$model$Maturity),0.1))),\n                                        BBBm=rep(0,length(seq(0.1,max(obj$model$Maturity),0.1)))))\n  p3 <- predict(obj, newdata=data.frame(Maturity=seq(0.1,max(obj$model$Maturity),0.1),\n                                        BBB=rep(0,length(seq(0.1,max(obj$model$Maturity),0.1))),\n                                        BBBm=rep(1,length(seq(0.1,max(obj$model$Maturity),0.1)))))\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        p1)\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        p2)\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        p3)\n\n  n2 <- sum(obj$model$BBB, na.rm=T)\n  n3 <- sum(obj$model$BBBm, na.rm=T)\n  n1 <- length(obj$model$BBB[!is.na(obj$model$BBB)])-n2-n3\n  w1 <- n1/(n1+n2+n3)\n  w2 <- n2/(n1+n2+n3)\n  w3 <- n3/(n1+n2+n3)\n  p4 <- w1*p1+w2*p2+w3*p3\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        p4, lty=2)\n  abline(v=10,lty=2)\n}\n\n\nfitnelsonsiegelsvenssonadjust <- function(data, lambda1start=1/lambdastart(2.5),\n                                          lambda2start=1/lambdastart(5), epsilon=1E-14){\n  lambda1 <- lambda1start\n  lambda2 <- lambda2start\n  DF <- data\n  y <- DF$Yield\n  Z1 <- DF$Maturity/lambda1\n  Z2 <- DF$Maturity/lambda2\n  F0 <- 1-(1-exp(-Z1))/Z1\n  F1 <- (1-exp(-Z1))/Z1\n  F2 <- ((1-exp(-Z1))/Z1-exp(-Z1))\n  F3 <-  ((1-exp(-Z2))/Z2-exp(-Z2))\n  BBB <- as.numeric(as.character(DF$Credit.rating)==\"BBB\")\n  BBBm <- as.numeric(as.character(DF$Credit.rating)==\"BBB-\")\n\n\n  xx1 <- nnnpls(cbind(F0,F1,F2,F3,BBB+BBBm,BBBm),DF$Yield,c(1,1,-1,-1,1,1))\n  xx2 <- nnnpls(cbind(F0,F1,F2,F3,BBB+BBBm,BBBm),DF$Yield,c(1,1,1,-1,1,1))\n  xx3 <- nnnpls(cbind(F0,F1,F2,F3,BBB+BBBm,BBBm),DF$Yield,c(1,1,-1,1,1,1))\n  xx4 <- nnnpls(cbind(F0,F1,F2,F3,BBB+BBBm,BBBm),DF$Yield,c(1,1,1,1,1,1))\n  mindeviance=c(deviance(xx1),deviance(xx2),deviance(xx3),deviance(xx4))\n  eval(parse(text=paste0(\"svA <- coef(xx\",which.min(mindeviance),\")\")))\n  fitorig1 <- nlsLM(Yield~ exp(delta1) + (exp(delta2)-exp(delta1)) * (1-exp(-Maturity/(exp(gamma1)))) /\n                      (Maturity/(exp(gamma1))) +\n                      delta3 * ((1-exp(-Maturity/(exp(gamma1)))) /\n                                  (Maturity/(exp(gamma1)))-\n                                  exp(-Maturity/(exp(gamma1))))+\n                      delta4 * ((1-exp(-Maturity/(exp(gamma2)+exp(gamma1)))) /\n                                  (Maturity/(exp(gamma2)+exp(gamma1)))-\n                                  exp(-Maturity/(exp(gamma2)+exp(gamma1))))+\n                      exp(theta1)*(BBB+BBBm)+exp(theta2)*BBBm,\n                    data=DF,\n                    start=list(delta1=log(svA[1]+epsilon),\n                               delta2=log(svA[2]+epsilon),\n                               delta3=svA[3],delta4=svA[4],\n                               gamma1=log(lambda1start),\n                               gamma2=log(lambda2start-lambda1start),\n                               theta1=log(svA[5]+epsilon),\n                               theta2=log(svA[6]+epsilon)),\n                    control=nls.lm.control(maxiter=1024,maxfev=10000), trace=F,model=T)\n  class(fitorig1) <- c(\"NelsonSiegelSvenssonAdjust\",\"nls\")\n  return(fitorig1)\n}\n\n\n\n\n\nprint.NelsonSiegelSvenssonAdjust <- function(obj){\n  transformnssa <- function(obj){\n    cc <- coef(obj)\n    tt <- cc\n    tt[1] <- exp(cc[1]); tt[2] <- exp(cc[2])-exp(cc[1])\n    tt[5] <- exp(cc[5]); tt[6] <- exp(cc[6])+exp(cc[5]);\n    tt[7] <- exp(cc[8]); tt[8] <- -exp(cc[7])\n    names(tt) <- c(\"beta1\",\"beta2\",\"beta3\",\"beta4\",\"lambda1\", \"lambda2\",\"beta5\", \"beta6\")\n    return(tt)\n  }\n  x1 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=0, BBB=0))[1]\n  x2 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=0, BBB=1))[1]\n  x3 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=1, BBB=0))[1]\n  n2 <- sum(obj$model$BBB, na.rm=T)\n  n3 <- sum(obj$model$BBBm, na.rm=T)\n  n1 <- length(obj$model$BBB[!is.na(obj$model$BBB)])-n2-n3\n  w1 <- n1/(n1+n2+n3)\n  w2 <- n2/(n1+n2+n3)\n  w3 <- n3/(n1+n2+n3)\n  x <- w1*x1+w2*x2+w3*x3\n  p <- getFromNamespace(\"print.nls\",\"stats\")(obj)\n  r <- list(transformnssa(obj),x,((1+x/200)^2-1)*100)\n  attributes(r) <- NULL\n\n  names(r) <- c(\"Original parameters\",\"Ten Year Yield (Semi-Annual Basis)\",\n                \"Ten Year Yield (Annual Basis)\")\n  return(r)\n}\n\nsummary.NelsonSiegelSvenssonAdjust <- function(obj){\n  transformnssa <- function(obj){\n    cc <- coef(obj)\n    tt <- cc\n    tt[1] <- exp(cc[1]); tt[2] <- exp(cc[2])-exp(cc[1])\n    tt[5] <- exp(cc[5]); tt[6] <- exp(cc[6])+exp(cc[5]);\n    tt[7] <- exp(cc[8]); tt[8] <- -exp(cc[7])\n    names(tt) <- c(\"beta1\",\"beta2\",\"beta3\",\"beta4\",\"lambda1\", \"lambda2\",\"beta5\", \"beta6\")\n    return(tt)\n  }\n  x1 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=0, BBB=0))[1]\n  x2 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=0, BBB=1))[1]\n  x3 <- predict(obj, newdata=data.frame(Maturity=10, BBBm=1, BBB=0))[1]\n  n2 <- sum(obj$model$BBB, na.rm=T)\n  n3 <- sum(obj$model$BBBm, na.rm=T)\n  n1 <- length(obj$model$BBB[!is.na(obj$model$BBB)])-n2-n3\n  w1 <- n1/(n1+n2+n3)\n  w2 <- n2/(n1+n2+n3)\n  w3 <- n3/(n1+n2+n3)\n  x <- w1*x1+w2*x2+w3*x3\n  r <- list(getFromNamespace(\"summary.nls\",\"stats\")(obj),transformnssa(obj),x,((1+x/200)^2-1)*100)\n  attributes(r) <- NULL\n  names(r) <- c(\"Fitted Nelson-Siegel-Svensson Model\",\"Original Parameters\",\"Ten Year Yield (Semi-Annual Basis)\",\n                \"Ten Year Yield (Annual Basis)\")\n  return(r)\n}\n\nplot.NelsonSiegelSvenssonAdjust <- function(obj){\n  plot(obj$model$Maturity, obj$model$Yield, xlab=\"Maturity\", ylab=\"Yield\",\n       main=\"Nelson-Siegel-Svennson Model\\nAdjusted for Credit Ratings\",las=1,\n       pch=1+obj$model$BBB+2*obj$model$BBBm)\n  p1 <- predict(obj, newdata=data.frame(Maturity=seq(0.1,max(obj$model$Maturity),0.1),\n                                        BBB=rep(0,length(seq(0.1,max(obj$model$Maturity),0.1))),\n                                        BBBm=rep(0,length(seq(0.1,max(obj$model$Maturity),0.1)))))\n  p2 <- predict(obj, newdata=data.frame(Maturity=seq(0.1,max(obj$model$Maturity),0.1),\n                                        BBB=rep(1,length(seq(0.1,max(obj$model$Maturity),0.1))),\n                                        BBBm=rep(0,length(seq(0.1,max(obj$model$Maturity),0.1)))))\n  p3 <- predict(obj, newdata=data.frame(Maturity=seq(0.1,max(obj$model$Maturity),0.1),\n                                        BBB=rep(0,length(seq(0.1,max(obj$model$Maturity),0.1))),\n                                        BBBm=rep(1,length(seq(0.1,max(obj$model$Maturity),0.1)))))\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        p1)\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        p2)\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        p3)\n\n  n2 <- sum(obj$model$BBB, na.rm=T)\n  n3 <- sum(obj$model$BBBm, na.rm=T)\n  n1 <- length(obj$model$BBB[!is.na(obj$model$BBB)])-n2-n3\n  w1 <- n1/(n1+n2+n3)\n  w2 <- n2/(n1+n2+n3)\n  w3 <- n3/(n1+n2+n3)\n  p4 <- w1*p1+w2*p2+w3*p3\n  lines(seq(0.1,max(obj$model$Maturity),0.1),\n        p4, lty=2)\n  abline(v=10,lty=2)\n}\n\n\ndrp <- function(GSmodel10, NSmodel, NSSmodel, avspotratesa){\n  cod10 <- round(  (summary(GSmodel10)[[5]]+\n                      100*((1+predict(NSmodel,newdata=data.frame(Maturity=10))/200)^2-1)+\n                      100*((1+predict(NSSmodel,newdata=data.frame(Maturity=10))/200)^2-1 ))/3,4)\n  avswaprateann <- round(((1+avspotratesa/200)^2-1)*100,4)\n  results <- list(avspotratesa, avswaprateann, cod10, cod10-avswaprateann)\n  names(results) <- c(\"Average swap rate (semi-annual basis)\",\n                      \"Annualized Swap average (annual basis)\",\n                      \"10 year final cost of debt estimate\",\n                      \"10 year DRP\")\n  return(results)\n}\n\n\ndrpadjust <- function(GSadjustmodel10, NSadjustmodel, NSSadjustmodel, avspotratesa){\n  adj <- sum(as.numeric(names(table(GSadjustmodel10[[6]])))*table(GSadjustmodel10[[6]]))/\n    sum(as.numeric(table(GSadjustmodel10[[6]])))\n  x1 <- predict(NSadjustmodel, newdata=data.frame(Maturity=10, BBBm=0, BBB=0))[1]\n  x2 <- predict(NSadjustmodel, newdata=data.frame(Maturity=10, BBBm=0, BBB=1))[1]\n  x3 <- predict(NSadjustmodel, newdata=data.frame(Maturity=10, BBBm=1, BBB=0))[1]\n  n2 <- sum(NSadjustmodel$model$BBB, na.rm=T)\n  n3 <- sum(NSadjustmodel$model$BBBm, na.rm=T)\n  n1 <- length(NSadjustmodel$model$BBB[!is.na(NSadjustmodel$model$BBB)])-n2-n3\n  w1 <- n1/(n1+n2+n3)\n  w2 <- n2/(n1+n2+n3)\n  w3 <- n3/(n1+n2+n3)\n  x4 <- w1*x1+w2*x2+w3*x3\n\n  xx1 <- predict(NSSadjustmodel, newdata=data.frame(Maturity=10, BBBm=0, BBB=0))[1]\n  xx2 <- predict(NSSadjustmodel, newdata=data.frame(Maturity=10, BBBm=0, BBB=1))[1]\n  xx3 <- predict(NSSadjustmodel, newdata=data.frame(Maturity=10, BBBm=1, BBB=0))[1]\n  nn2 <- sum(NSSadjustmodel$model$BBB, na.rm=T)\n  nn3 <- sum(NSSadjustmodel$model$BBBm, na.rm=T)\n  nn1 <- length(NSSadjustmodel$model$BBB[!is.na(NSSadjustmodel$model$BBB)])-nn2-nn3\n  ww1 <- nn1/(nn1+nn2+nn3)\n  ww2 <- nn2/(nn1+nn2+nn3)\n  ww3 <- nn3/(nn1+nn2+nn3)\n  xx4 <- ww1*xx1+ww2*xx2+ww3*xx3\n\n  cod10 <- round(  (summary(GSmodel10)[[5]]+adj+\n                      100*((1+x4/200)^2-1)+\n                      100*((1+xx4/200)^2-1))/3,4)\n  avswaprateann <- round(((1+avspotratesa/200)^2-1)*100,4)\n  results <- list(avspotratesa, avswaprateann, cod10, cod10-avswaprateann)\n  names(results) <- c(\"Average swap rate (semi-annual basis)\",\n                      \"Annualized Swap average (annual basis)\",\n                      \"10 year final cost of debt estimate\",\n                      \"10 year DRP\")\n  return(results)\n}\n\ndrpplot <- function(GSmodel10, NSmodel, NSSmodel){\n  plot(NSmodel$model$Yield~NSmodel$model$Maturity,xlab=\"Maturity\", ylab=\"Yield\",\n       main=\"Comparison of Gaussian Smoothing,\\nNelson-Siegel, and Nelson-Siegel-Svensson\")\n  lines(seq(0.1,max(NSmodel$model$Maturity),0.1),\n        predict(NSmodel, newdata=data.frame(Maturity=seq(0.1,max(NSmodel$model$Maturity),0.1))))\n  lines(seq(0.1,max(NSSmodel$model$Maturity),0.1),\n        predict(NSSmodel, newdata=data.frame(Maturity=seq(0.1,max(NSSmodel$model$Maturity),0.1))))\n  xx <- seq(0.1,max(GSmodel10[[1]]$model$maturity),0.1)\n  yy <- unlist(sapply(sapply(lapply(xx,gswt1,data=GSmodel10[[5]]),\"[\",2),\"[\",1))\n  invisible(lines(xx,yy))\n  abline(v=10, lty=2)\n}\n",
    "created" : 1453412633906.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3415274462",
    "id" : "2A96D12B",
    "lastKnownWriteTime" : 1454975081,
    "last_content_update" : 0,
    "path" : "~/Documents/DRP/drpr/R/Drpr_functions.R",
    "project_path" : "R/Drpr_functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 16,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}